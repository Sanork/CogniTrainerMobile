import QtQuick
import QtQuick.Controls
import QtQuick.Layouts

Item {
    id: root
    anchors.fill: parent

    property var moduleData
    property StackView stackViewRef

    property bool endlessMode: moduleData?.endlessMode ?? false

    property int totalRounds: 5
    property int roundCount: 0
    property int clickCount: 0
    property real totalReactionTime: 0
    property real bestReactionTime: 999999
    property bool waitingForGreen: false
    property bool isGreen: false
    property real roundStartTime: 0
    property bool paused: false

    property int falseStarts: 0 // [–¥–æ–±–∞–≤–ª–µ–Ω–æ]

    Timer {
        id: waitTimer
        interval: 1000 + Math.random() * 3000
        running: false
        repeat: false
        onTriggered: {
            if (!paused) {
                showGreen()
            }
        }
    }

    // –ò–≥—Ä–æ–≤–æ–π —Ñ–æ–Ω
    Rectangle {
        anchors.fill: parent
        color: "white"
        z: 0
    }

    // –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
    Rectangle {
        id: topBar
        height: 56
        width: parent.width
        color: "#f0f0f0"
        anchors.top: parent.top
        border.color: "#cccccc"
        z: 10

        RowLayout {
            anchors.fill: parent
            anchors.margins: 8
            spacing: 4

            ToolButton {
                text: "\u2190"
                font.pixelSize: 24
                onClicked: root.stackViewRef.pop()
                Layout.alignment: Qt.AlignVCenter
            }

            Item { Layout.fillWidth: true }

            Text {
                text: endlessMode
                      ? "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: " + (clickCount > 0
                          ? Math.round(totalReactionTime / clickCount) + " –º—Å"
                          : "‚Äî")
                      : "–†–∞—É–Ω–¥: " + (roundCount + 1) + " –∏–∑ " + totalRounds
                font.pixelSize: 16
                color: "#333"
                visible: !gameOverOverlay.visible
                Layout.alignment: Qt.AlignVCenter
            }

            // –ü–∞—É–∑–∞
            Item {
                width: 40
                height: 40
                visible: !gameOverOverlay.visible && !countdownOverlay.visible

                Rectangle {
                    anchors.fill: parent
                    radius: width / 2
                    color: "#666666"
                }

                Rectangle {
                    width: 5
                    height: 18
                    radius: 2
                    color: "white"
                    anchors.verticalCenter: parent.verticalCenter
                    anchors.right: parent.horizontalCenter
                    anchors.rightMargin: 3
                }

                Rectangle {
                    width: 5
                    height: 18
                    radius: 2
                    color: "white"
                    anchors.verticalCenter: parent.verticalCenter
                    anchors.left: parent.horizontalCenter
                    anchors.leftMargin: 3
                }

                MouseArea {
                    anchors.fill: parent
                    onClicked: root.togglePause()
                    cursorShape: Qt.PointingHandCursor
                }

                Layout.alignment: Qt.AlignVCenter
            }

            // –°—Ç–æ–ø
            Item {
                width: 40
                height: 40
                visible: endlessMode && !gameOverOverlay.visible && !countdownOverlay.visible

                Rectangle {
                    anchors.fill: parent
                    radius: width / 2
                    color: "#666666"
                }

                Rectangle {
                    width: 14
                    height: 14
                    color: "white"
                    radius: 3
                    anchors.centerIn: parent
                }

                MouseArea {
                    anchors.fill: parent
                    onClicked: root.endGame()
                    cursorShape: Qt.PointingHandCursor
                }

                Layout.alignment: Qt.AlignVCenter
            }
        }
    }

    // –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
    Rectangle {
        id: gameArea
        anchors {
            top: topBar.bottom
            left: parent.left
            right: parent.right
            bottom: parent.bottom
        }
        color: "transparent"
        z: 5

        MouseArea {
               id: gameMouseArea
               anchors.fill: parent
               enabled: !countdownOverlay.visible && !gameOverOverlay.visible && !paused
               onClicked: {
                   if (waitingForGreen && !isGreen) {
                       falseStarts++  // [–¥–æ–±–∞–≤–ª–µ–Ω–æ]
                       waitNext()
                   } else if (isGreen) {
                       const reactionTime = Date.now() - roundStartTime
                       totalReactionTime += reactionTime
                       if (reactionTime < bestReactionTime)
                           bestReactionTime = reactionTime
                       clickCount++
                       roundCount++
                       waitNext()
                   }
               }
           }

        Rectangle {
            id: circle
            width: 200
            height: 200
            radius: 100
            color: isGreen ? "limegreen" : "crimson"
            anchors.centerIn: parent
            visible: waitingForGreen || isGreen
        }
    }

    // –û–≤–µ—Ä–ª–µ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è
    Rectangle {
           id: gameOverOverlay
           anchors.fill: parent
           visible: false
           color: Qt.rgba(0, 0, 0, 0.6)
           z: 100

           Rectangle {
               width: 300
               height: 260
               radius: 12
               color: "white"
               anchors.centerIn: parent

               Column {
                   anchors.centerIn: parent
                   spacing: 12

                   Text {
                       text: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!"
                       font.pixelSize: 24
                       color: "#333333"
                       horizontalAlignment: Text.AlignHCenter
                       width: parent.width
                   }

                   Text {
                       text: "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: " + (clickCount > 0
                             ? Math.round(totalReactionTime / clickCount) + " –º—Å"
                             : "‚Äî")
                       font.pixelSize: 18
                       color: "#555"
                   }

                   Text {
                       text: "–õ—É—á—à–µ–µ –≤—Ä–µ–º—è: " + (bestReactionTime < 999999
                             ? Math.round(bestReactionTime) + " –º—Å"
                             : "‚Äî")
                       font.pixelSize: 18
                       color: "#555"
                   }

                   Text {
                       text: "–§–∞–ª—å—Å—Ç–∞—Ä—Ç—ã: " + falseStarts  // [–¥–æ–±–∞–≤–ª–µ–Ω–æ]
                       font.pixelSize: 18
                       color: "#aa0000"
                   }

                   Button {
                       text: "–°—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
                       onClicked: resetGame()
                   }
               }
           }
       }


    // –û–≤–µ—Ä–ª–µ–π –ø–∞—É–∑—ã
    Rectangle {
        id: pauseOverlay
        anchors.fill: parent
        visible: paused
        color: "#00000066"
        z: 90

        Rectangle {
            width: 150
            height: 150
            radius: width / 2
            color: Qt.rgba(0, 0, 0, 0.6)
            anchors.centerIn: parent

            Text {
                text: "–ü–∞—É–∑–∞"
                anchors.centerIn: parent
                font.pixelSize: 28
                color: "white"
            }
        }

        MouseArea {
            anchors.fill: parent
            onClicked: {
                if (root.paused) {
                    root.togglePause()
                }
            }
        }
    }

    Rectangle {
        id: countdownOverlay
        anchors.fill: parent
        visible: false
        color: "#00000066"
        z: 95

        property int countdownValue: 3

        Timer {
            id: countdownStartTimer
            interval: 1000
            running: false
            repeat: true
            onTriggered: {
                countdownOverlay.countdownValue--
                if (countdownOverlay.countdownValue < 0) {
                    countdownStartTimer.stop()
                    countdownOverlay.visible = false
                    startGame()  // –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç—Å—á—ë—Ç–∞
                }
            }

        }

        Rectangle {
            width: 150
            height: 150
            radius: width / 2
            color: Qt.rgba(0, 0, 0, 0.6)
            anchors.centerIn: parent

            Text {
                anchors.centerIn: parent
                width: parent.width
                text: countdownOverlay.countdownValue > 0
                      ? countdownOverlay.countdownValue
                      : "–°—Ç–∞—Ä—Ç!"                      // üîß –ó–¥–µ—Å—å ‚Äî —Ñ–∏–∫—Å!
                font.pixelSize: 48
                color: "white"
                horizontalAlignment: Text.AlignHCenter
            }
        }
    }




    // --- –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã --- //

    function showGreen() {
        isGreen = true
        waitingForGreen = true
        roundStartTime = Date.now()
    }

    function waitNext() {
        isGreen = false
        waitingForGreen = false

        if (!endlessMode && roundCount >= totalRounds) {
            gameOverOverlay.visible = true
        } else {
            waitingForGreen = true
            waitTimer.interval = 1000 + Math.random() * 3000
            if (!paused) {
                waitTimer.restart()
            }
        }
    }

    function resetGame() {
        roundCount = 0
        clickCount = 0
        totalReactionTime = 0
        bestReactionTime = 999999

        isGreen = false
        waitingForGreen = false

        waitTimer.stop()            // –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–µ–ª–µ–Ω–æ–≥–æ –∫—Ä—É–≥–∞
        countdownStartTimer.stop()  // –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –æ—Ç—Å—á—ë—Ç–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)

        gameOverOverlay.visible = false
        paused = false

        countdownOverlay.countdownValue = 3
        countdownOverlay.visible = true
        countdownStartTimer.start() // –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç—Å—á—ë—Ç –∑–∞–Ω–æ–≤–æ
    }



    function startGame() {
        isGreen = false          // –∫—Ä—É–≥ –ø–æ–∫–∞ –Ω–µ –∑–µ–ª–µ–Ω—ã–π
        waitingForGreen = true   // –º—ã –∂–¥—ë–º –º–æ–º–µ–Ω—Ç–∞ –∑–µ–ª–µ–Ω–æ–≥–æ –∫—Ä—É–≥–∞, –Ω–æ –∫—Ä—É–≥ –≤–∏–¥–µ–Ω

        waitTimer.interval = 1000 + Math.random() * 3000
        if (!paused) {
            waitTimer.start()
        }
    }



    function togglePause() {
        paused = !paused
        if (paused) {
            waitTimer.stop()
        } else {
            if (waitingForGreen) {
                waitTimer.restart()
            }
        }
    }

    function endGame() {
        gameOverOverlay.visible = true
    }

    Component.onCompleted: resetGame()
}

